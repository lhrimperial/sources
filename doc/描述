分销推送平台负责将公司产品信息、价格库存信息、订单状态信息、支付退款信息等消息推送给分销商。一期：主要是把推送业务从业务系统中拆分出来作为一个独立的服务和独立的数据库，
并细化与主站的消息类型，从源头上精简推送消息的量，重构优化推送服务代码。二期：构建通用、高效、稳定、易管控、解耦业务的推送服务平台，
支持多协议、多种推送格式、优先级、容易扩展等特性，实 时 统 计 接 收 量 、 推 送 量 、 成 功 量 、 失 败 量 并 以 曲 线 图 展 示 可 以 直 观 的 观 察 推 送 情 况 。
BMS由Scheduler、Client、Pusher、Admin四个组件组成。其中Scheduler、Client、Pusher基于Netty网络通信框架开发，基于Netty的Reactor线程模型实现高并发以提高系统的吞吐量；
使用Zookeeper作为注册中心实现节点的注册与服务订阅；使用Redis实现任务队列及缓存，使用ActiveMQ实现管理后台与节点间的消息通知；使用MySQL+MyBatis实现持久化，
根据消息类型进行分表存储以提高系统的并发能力，搭建ELK日志 系统存储以查看 推送日志 。Admin基于Spring Boot实现推送地址、协议、格式等配置信息管理，实时推送情况曲线图，
通过调用ES实现友好的日志查询等功能。
负责拆分与开发推送相关系统与需求，并调研原有推送系统，整理出原推送系统中的不足并优化以满足现有需求。
负责建设分销推送平台，针对原有推送系统的弊端和易用性、扩展性、及时性、解耦业务等要求，设计以light-task-scheduler（Git Hub开源项目）为原型的BMS推送系统。
负责设计和输出ERD文档，搭建项目结构并开发核心模块，搭建开发环境。
负责分派开发任务，对组员进行业务指导与提供技术支持，代码review把控代码规范与质量。
负责项目顺利上线，各种环境资源申请，业务测试性能测试等各阶段时间把控，保证项目如期上线。


lmm-boot主要使用Spring Boot整合常用框架以及整合驴妈妈  公司内部框架成各个独立的starter，集成到一个Maven项目模板骨架中，用于驴妈妈项目快速搭建，简化开发，开箱即用。
负责lmm-boot项目整体设计与构建，设计开发core包，用于支持其他模块的整合。
负责整合JDBC、MyBatis、Dubbo、Web、logging等核心模块整 合，支持多数据源、应用层读 写分离、MyBatis分页插件等。
负责构建Maven模板骨架，设计应用分层并引入相应的starter。搭建项目只需一条maven命令即可生成一个可运行的项目。
负责输出使用文档，并在后期使用中给与技术支持。



一、BMS设计，与MQ比较优势
前期主要负责推送系统的微服务拆分，把服务和数据库独立出来，精简消息类型，减少推送量，以满足当前的推送业务。前期的推送系统主要才有消息存储数据库，定时任务取消息数据，
查询其他服务组装推送报文，与业务耦合度较高，难以复用，开发成本高，难以策略华推送，伸缩性查，难以扩展。
针对原有系统的弊端，我们设计开发了通用、高效、稳定、解耦业务、易扩展的推送服务平台，该系统设计分为四个节点，client负责提交业务系统中组装好的推送报文，
Scheduler负责落地消息数据与预加载数据到推送任务队列、统计推送情况、流量控制、预警等工作，pusher负责按照配置格式化推送报文和推送消息到分销商，
admin后台管理与配置推送相关信息。其中client、pusher、scheduler的通信是基于Netty开发的一套私有协议，提供了同步、异步的调用方式，能有效处理大量的网络请求，
这样在大量网络连接中能有效降低网络成本。使用zookeeper作为注册中心，监控集群节点上下线，这些节点都是无状态的，各节点可以部署多个并动态的进行删减，来实现负载均衡，
实现更大的负载量。并且系统采用FailStore策略使系统具有很好的容错能力。例如由于网络问题导致数据发送失败等问题提供了数据暂存本地磁盘，定时重试的解决方案。
这些节点分布式及横向扩展，所以性能瓶颈在数据库。数据库使用的是mysql，在消息存取上设计为按消息类型分表，尽量使用小数据类型定义字段，
使用后台任务预加载消息到Redis消息队列，本地缓存配置信息等提升数据性能。

我是这个项目的主要负责人，由于我一直负责推送系统，对这块业务和原有系统比较熟悉，和产品一起设计了以上的这个方案，并负责设计和输出ERD文档，一共三个开发，
我负责搭建项目与开发核心模块，netty通信、zk注册与订阅、消息预加载与分发、断路器、预警、统计、推送到分销商的http请求等，负责分配开发任务与指导组员，
和产品一起负责协调资源。

各节点各部署一台2核16G的机器、一台redis、一台mysql，压测4500左右的tps，目前线上scheduler、pusher、redis主备、mysql主备日均消息量600W，压力不大。


推送服务平台是基于Netty、zookeeper、Redis、MySQL实现的通用、高效、稳定、解耦业务、易扩展的平台，支持多种协议推送、多种数据格式、优先级等特性。
基于netty的Reactor线程模型处理大量的客户端连接，大量使用了线程池来处理业务逻辑，如多线程加载数据到redis任务队列，多线程推送消息到分销商。
根据消息类型对MySQL进行分表，提高DB层的并发能力。把M个消息类型分布到N个节点上去做加载，在节点上M/N个类型通过多线程实现加载，通过Semaphore信号量来控制并发线程数，
通过锁住一个消息类型来防止多线程重复加载。在推送端通过Http连接池实现Http连接复用。在client、pusher支持FailStore机制来进行节点容错，客户端连接服务时支持负载均衡。
与MQ比较：
    易用性，新接入消息类型，MQ新建队列，配置新的消费者
    消息快速消费，实时性
    netty适用于大量的连接，与网络IO
    消息可靠性，引入新的中间件，就引入和新的不确定因素
    双边需要反馈结果，以便做实时统计

http://www.cnblogs.com/JavaArchitect/p/7586949.html