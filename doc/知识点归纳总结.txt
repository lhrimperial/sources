@(all_describe)
####知识点
##### 项目描述
一、BMS设计，与MQ比较优势
推送服务平台是基于Netty、zookeeper、Redis、MySQL实现的通用、高效、稳定、解耦业务、易扩展的平台，支持多种协议推送、多种数据格式、优先级等特性。
基于netty的Reactor线程模型处理大量的客户端连接，大量使用了线程池来处理业务逻辑，如多线程加载数据到redis任务队列，多线程推送消息到分销商。
根据消息类型对MySQL进行分表，提高DB层的并发能力。把M个消息类型分布到N个节点上去做加载，在节点上M/N个类型通过多线程实现加载，通过Semaphore信号量来控制并发线程数，
通过锁住一个消息类型来防止多线程重复加载。在推送端通过Http连接池实现Http连接复用。在client、pusher支持FailStore机制来进行节点容错，客户端连接服务时支持负载均衡。
与MQ比较：
    易用性，新接入消息类型，MQ新建队列，配置新的消费者
    消息快速消费，实时性
    netty适用于大量的连接，与网络IO
    消息可靠性，引入新的中间件，就引入和新的不确定因素
    双边需要反馈结果，以便做实时统计

二、幂等设计
    1.查询、删除：具有天然幂等性
    2.新增：Token防重复提交，只需要网关这层控制即可；Token的处理机制，还需要缓存调用的处理结果，以判断是否需要放行后续的重试请求，
        唯一索引，防止新增脏数据
    3.更新：不仅需要有表单防重复提交的验证，还需要有下面这些更精细的控制，以防止高并发环境中出现脏读，幻读等引起错误的数据更新结果；
         更新业务接口幂等性解决方案一般是通过各种层面的锁和CAS机制；
         1）悲观锁，select for update，整个执行过程中锁定要操作的记录；
         2）乐观锁：CAS
         3）防重表、分布式锁
         4）状态机幂等
         5）通过条件限制（CAS，带上原先的值）

三、分布式事务
    对于分布式事务的实现，常见的一致性算法（如二阶段提交）耗时长、效率低，一般使用MQ来实现数据的最终一致性。
    大事务 = 小事务 + MQ
    1.方案一：不支持事务的MQ，业务方自己实现
        1）Producer端准备一张消息表，把扣钱update DB和插入消息这两个操作，放在一个事务里面
        2）准备一个后台程序，定时把消息表中的message发送给消息中间件，失败了，就不断重试，允许消息重复
        3）Consumer接收消息并做好幂等处理
    该方案的缺点是需要额外设计消息表，同时还要开发一个后台任务扫码本地消息，这将导致消息处理和业务逻辑耦合。
    2.支持事务的MQ，RocketMQ事务消息
        RocketMQ的一个特性是能够发送“事务消息”，既解决上文中问题，又不和业务耦合。
        RocketMQ把消息的发送分成了2个阶段：Prepare阶段 和 确认阶段，具体来说分为3个步骤：
        1）发送Prepared消息
        2）执行本地事务
        3）根据本地事务执行结果成功或失败，确认或取消Prepared消息
        如果前两步成功了，最后一步失败，怎么办？RocketMQ会定期扫描所有Prepared消息，询问发送方消息是确认发出去还是取消发送

四、 顺序消息
    保证消息有序，最简单的方法是生产者--MQ--消费者都是一对一对一的关系，在生产者端，如果能把顺序消息发送到同一个consumer queue中，那么消息就是有序的。

五、缓存设计
    1.缓存雪崩：由于原有缓存失效，新缓存未到期间，解决方案：加锁和队列、失效时间基础上增加一个随机值
    2.缓存穿透：缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，
        然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。
    3.缓存预热：直接写个缓存刷新页面，上线时手工操作下；数据量不大，可以在项目启动的时候自动进行加载；定时刷新缓存；
    4.缓存更新：
    5.缓存降级：


#### 技术点
一、 TCP/IP Socket
     TCP协议是面向连接的、保证高可靠性的传输协议，IP协议是无连接、不可靠的网络协议
     1.常规应用的四层网络分层：应用层、传输层、网络层、链路层
     2.Socket是在应用层和传输层之间的一个抽象层，封装了传输层的复杂操作提供简单易用的API给应用层使用
     3.TCP 连接的三次握手，客户端向服务端发送一个syn包（syn=j），服务端收到syn包并确认（ack=j+1），同时向客户端发送一个syn包（syn=k），
     客户端收到服务端的确认包和同步包，客户端再向服务端发一个确认包（ack=k+1），完成三次握手
     4.TCP 断开四次挥手，客户端会先发一个FIN包通知服务端请求关闭连接，服务端会发一个确认ack包给客户端，当服务端运行一段时间后会发一个FIN包给客户端请求断开连接，
     客户端收到服务端请求之后会发一个确认ack包给服务端，表示收到服务端请求
     5.TCP 可靠性的保证是采用“带重传的肯定确认的”技术，结合滑动窗口技术以提高网络吞吐量
     6.TCP 粘包、拆包原因
        - Socket 缓冲区和滑动窗口：每个socket在内核中都有一个发送缓冲区和接收缓冲区
        - MSS/MTU 限制：MSS（TCP报文中data部分的最大长度）、MTU（链路层一次发送 最大数据限制）
        - Nagle 算法
     7.TCP 粘包、拆包问题解决：可以通过定义应用的协议(protocol)来解决，协议的作用就定义传输数据的格式。

二、NIO
     NIO 非阻塞IO，一种基于通道和缓冲区的IO方式。NIO 有三大核心组件，Channel（通道）、Buffer（缓冲区）、Selector（选择器）。
     数据总是从通道读取到缓冲区或者是从缓冲区写入通道，Selector用来监听多个通道的事件，因此单个线程可以监听多个数据通道。
     一个通道创建之后在Selector上注册感兴趣的事件，通过调用Selector的select方法返回一个准备就绪的SelectionKey集合，SelectionKey中包含
     对这个事件感兴趣的Channel。
    1、同步与异步关注的是消息的通信机制
        - 同步：发出一个调用时，在没有得到结果之前，该调用就不返回，由调用者主动等待调用结果。
        - 异步：发出一个调用时，这个调用直接返回，所以没有返回结果，而是由被调用者通过状态、消息来通知调用者，或者通过回调函数处理这个调用。
    2、阻塞与非阻塞关注的是程序在等待调用结果（消息、返回值）时的状态
        - 阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起，调用线程只有在得到调用结果之后才会返回。
        - 非阻塞：非阻塞调用是指在不能立即得到结果之前，该调用不会阻塞当前线程。
    3、IO模型：
        - 阻塞IO模型：系统调用直到数据报到达且被拷贝到应用进程的缓冲区中或者发生错误才返回，期间一直在等待，整段时间都是在阻塞的
        - 非阻塞IO模型：当所请求的I/O操作不能满足要求时候，不把本进程投入睡眠，而是返回一个错误。也就是说当数据没有到达时并不等待，而是以一个错误返回。
        - IO复用模型：进程通过将一个或多个fd传递给select或poll系统调用，阻塞在select;这样select/poll可以帮我们侦测许多fd是否就绪，当有fd就绪时，立即回调函数rollback
        - 信号驱动异步IO模型：
        - 异步IO模型：告知内核启动某个操作，并让内核在整个操作完成后(包括将数据从内核拷贝到用户自己的缓冲区)通知我们。
        一个IO操作分为两个步骤：发起IO请求和实际的IO操作，同步IO和异步IO的区别就在于第二个步骤是否阻塞，阻塞IO和非阻塞IO的区别在于第一个步骤，发起IO请求是否会阻塞
    4、AIO，BIO，NIO
        - AIO异步非阻塞IO，AIO方式适用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。
        - NIO同步非阻塞IO，适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。
        - BIO同步阻塞IO，适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。
    5、epoll,select/poll
        都是IO复用，I/O多路复用就通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。
        但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，
        异步I/O的实现会负责把数据从内核拷贝到用户空间。
        epoll的效率更高，优化了select的轮询操作，通过callback事件响应方式。
        - select：每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大，同时每次调用select都需要在内核遍历传递进来的所有fd，
            这个开销在fd很多时也很大，select支持的文件描述符数量太小了，默认是1024
        - poll：poll的实现和select非常相似，只是描述fd集合的方式不同，poll使用pollfd结构而不是select的fd_set结构.
        - epoll：epoll是对select和poll的改进，epoll保证了每个fd在整个过程中只会拷贝一次，为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，
            就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表，epoll没有限制描述符的数量，和系统内存关系比较大
    6、不建议使用NIO的原因
        - NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。
        - 需要具备其他的额外技能做铺垫，例如熟悉Java多线程编程。这是因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序。
        - 可靠性能力补齐，工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等问题，
            IO编程的特点是功能开发相对容易，但是可靠性能力补齐的工作量和难度都非常大。
        - JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。

三、Netty
    Netty是一个高性能、异步事件驱动的NIO网络框架，具有高并发、传输快、封装好等特点。
    1. Netty的Reactor线程模型：mainReactor负责处理客户端的连接请求，并将accept的连接注册到subReactor中的一个线程中；subReactor负责处理
    客户端通道上的数据读写；ThreadPool 负责处理具体的业务逻辑。
    2.Netty服务启动之前调用group、channel，handler、option、attr、childHandler、childOption、childAttr设置启动参数
    3.Netty通过编写多个ChannelHandler 来处理不同的功能，通过ChannelPipeline来保证ChannelHandler的处理顺序。每个Channel创建的时候都会关联一个ChannelPipeline，
    ChannelHandler通过封装成ChannelHandlerContext链表结构添加到ChannelPipeline中以此来保证ChannelHandler的执行顺序。
    4.调用顺序：先是调用ChannelPipeline中的fireXXX方法，接着是ChannelHandlerContext中的fireXXX方法，最后是ChannelHandler中的XXX方法
    5.选择Netty的原因：Netty是业界最流行的NIO框架之一，它的健壮性、功能、性能、可定制性和可扩展性在同类框架中都是首屈一指的
        1）API使用简单，开发门槛低；
        2）功能强大，预置了多种编解码功能，支持多种主流协议；
        3）定制能力强，可以通过ChannelHandler对通信框架进行灵活的扩展；
        4）性能高，通过与其它业界主流的NIO框架对比，Netty的综合性能最优；
        5）成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼
        6）社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入；

Netty附：
1、Selector BUG出现的原因
    若Selector的轮询结果为空，也没有wakeup或新消息处理，则发生空轮询，CPU使用率100%
    Netty的解决办法：对Selector的select操作周期进行统计，每完成一次空的select操作进行一次计数，若在某个周期内连续发生N次空轮询，则触发了epoll死循环bug，
    重建Selector，判断是否是其他线程发起的重建请求，若不是则将原SocketChannel从旧的Selector上去除注册，重新注册到新的Selector上，并将原来的Selector关闭。
2、Netty心跳
    - 心跳其实就是一个简单的请求，对于服务端：会定时清除闲置会话；对于客户端:用来检测会话是否断开，是否重来，检测网络延迟
    - idleStateHandler类 用来检测会话状态
3、无锁化的串行设计理念
    - 通过串行化设计，即消息的处理尽可能在同一个线程内完成，期间不进行线程切换，这样就避免了多线程竞争和同步锁。
    - 通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列-多个工作线程模型性能更优。
4、Netty的可靠性
    - 链路有效性检测：链路空闲检测机制：读/写空闲超时机制
    - 内存保护机制：通过内存池重用ByteBuf;ByteBuf的解码保护
    - 优雅停机：不再接收新消息、退出前的预处理操作、资源的释放操作
5、Netty安全性
    - Netty支持的安全协议：SSL V2和V3，TLS，SSL单向认证、双向认证和第三方CA认证。
    - SSL的三种认证方式
6、Netty的高效并发编程主要体现在如下几点：
    1) volatile的大量、正确使用;
    2) CAS和原子类的广泛使用；
    3) 线程安全容器的使用；
    4) 通过读写锁提升并发性能。
7、Netty除了使用reactor来提升性能，当然还有
    1）零拷贝，IO性能优化
    2）通信上的粘包拆包
    2）同步的设计
    3）高性能的序列
8、Netty实现同步调用的实现方案
    - 请求与响应的正确匹配：通过客户端唯一的RequestId，服务端返回的响应中需要包含改RequestId，
    - 请求线程和响应线程间的通信：请求线程会在请求发出之后同步等待服务端的返回，需要解决的问题是接到响应之后如何通知请求线程
    解决方案：利用Java中的CountDownLatch类来实现同步Future。具体过程是：客户端发送请求后将<请求ID，Future>的键值对保存到一个全局的Map中，这时候用Future等待结果，
    挂住请求线程；当Netty收到服务端的响应后，响应线程根据请求ID到全局Map中取出Future，然后设置响应结果到Future中。这个时候利用CountDownLatch的通知机制，
    通知请求线程。请求线程从Future中拿到响应结果，然后做业务处理。然后从全局Map中移除请求ID。
    Dubbo中是通过ReentrantLock、Condition实现通知

四、Tomcat
    1.Tomcat的最顶层是一个Server，代表着整个服务，控制着整个tomcat的生命周期，一个Server包含至少一个Service，用于提供具体的服务。
    2.Service主要包含两个部分，Connector和Container，Connector负责处理网络连接相关的事情，并提供Socket和Request和Response的转换，
    Container负责封装和管理Servlet，以及处理Request请求，一个Service只有一个Container，但是可以有多个Connector，这是因为一个服务可以处理多个连接
    3.Connector使用ProtocolHandler来处理网络请求的，包含三个部件，EndPoint、Processor、Adapter，Endpoint用来处理底层的Socket网络连接，实现的是TCP/IP协议；
    Processor用于将连接接收到的socket封装成Request，实现的是Http协议；Adapter用于将Request交给Container具体处理。
    4.EndPoint中有两个内部类，Acceptor和Poller，Acceptor主要负责监听网络连接且进行任务分发的后台线程，Acceptor接收网络请求然后将socket交给Poller，Poller负责
    执行数据的读取和业务处理。
    5.tomcat类加载器
        - tomcat类加载器需要解决的几个问题：为了避免冲突，需要为每个webapp下的项目使用的类库建立隔离机制；不同的webapp项目支持共享类库；类加载器需要支持热插拔功能
        - tomcat最重要的是Common类加载器，他的父级加载器是应用类加载器，负责加载 `${catalina.base}/lib、${catalina.home}/lib` 目录下面所有的 .jar 文件和 .class 文件。
            有commonLoader、catalinaLoader、sharedLoader三类加载器，都属于同一个实例。
        - webapp类加载器：tomcat设计了为每个webapp下的项目单独使用一个WebappClassLoader类加载器，tomcat8使用的是ParallelWebappClassLoader，支持并行加载类，
            start 过程会读取我们熟悉的 /WEB-INF/classes、/WEB-INF/lib 资源。
        - WebappLoader：单独的类加载器是无法获取 webapp 的资源信息的，因此 tomcat 引入了 WebappLoader，便于访问 Context 组件的信息，同时为 Context 提供类加载的能力支持
            设置reloadable 属性为true支持热部署
        - tomcat启动时ClassLoader加载流程
            1）tomcat启动时调用System ClassLoader即AppClassLoader加载`${catalina.home}/bin`里面的jar，就是tomcat启动相关的jar
            2）tomcat启动类Bootstrap中有三个ClassLoader属性，catalinaClassLoader、commonClassLoader、sharedClassLoader，他们都是同一个实例，用来加载${catalina.home}/lib
                下的jar
            3）一个Context容器代表一个app应用，Context->WebappLoader->WebClassLoader,并且Thread.contextClassLoader=WebClassLoader。
                应用程序中的jsp文件、class类、lib/*.jar包，都是WebClassLoader加载的。
        - 当Jsp文件修改的时候，Tomcat更新步骤：
            1)当访问1.jsp的时候，1.jsp的包装类JspServletWrapper会去比较1.jsp文件最新修改时间和上次的修改时间，以此判断1.jsp是否修改过。
            2）1.jsp修改过的话，那么jspservletWrapper会清除相关引用，包括1.jsp编译后的servlet实例和加载这个servlet的JasperLoader实例。
            3）重新创建一个JasperLoader实例，重新加载修改过后的1.jsp，重新生成一个Servlet实例。
            4）返回修改后的1.jsp内容给用户。

五、JVM与多线程
    1.Java内存区域：程序计数器、虚拟机栈、本地方法栈、Java堆、方法区
    2.Java内存模型：这是一个抽象的概念，规范定义程序中变量的访问方式。每个线程创建的时候都会为其创建一个工作内存，用于存储线程私有的数据，
    而Java内存模型规定所有的变量都必须存储在主内存中，主内存属于共享区域，所有线程都可以访问，但是线程对变量的操作必须在工作内存中进行。所以，
    当线程要对共享变量操作是先要将主内存中的变量拷贝到工作内存，操作完之后再拷贝到主内存。
    3.在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。volatile保证共享变量对所有线程可见，禁止指令重排优化
    4.创建对象：检查这个类是否被加载，加载类，为对象分配内存，初始化对象内存空间，设置对象头（类的元数据信息、对象哈希码、GC分代年龄等），调用init方法初始化对象
    5.对象内存布局：对象头、实例数据、对齐填充，对象头中存放类元数据信息、哈希码、GC分代年龄、所标志信息等
    6.可达性分析算法：从节点开始搜索，是否有GC Roots与之相连，可作为GC Root的对象
        - 虚拟机栈中引用的对象
        - 本地方法栈中引用的对象
        - 方法区中类静态属性引用的对象
        - 方法区中常量引用的对象
    7.垃圾收集
    7.1 垃圾收集算法：标记-整理算法、复制算法、分代收集算法

    7.2 垃圾收集器

    8.堆内存分代：年轻代（Eden、Survivor）、老年代、永久代，Minor GC、Full GC，每块区域满了都会触发Minor GC，Old、Perm满了会触发Full GC
    8.1、内存分配策略
   		- 对象优先在Eden分配
   		当Eden区没有足够空间进行分配时， 虚拟机将发起一次Minor GC。
   		- 大对象直接进入老年代
   		- 长期存活的对象将进入老年代
   		对象在Survivor区中每“ 熬过” 一次Minor GC， 年龄就增加1岁， 当它的年龄增加到一定程度（ 默认为15岁） ，就将会被晋升到老年代中。
   		- 动态对象年龄判定
   		- 空间分配担保
    9.创建线程的方式：继承Thread、实现Runnable、由线程池创建，线程包含几种状态：创建(new)、就绪(runnable)、运行(running)、阻塞(blocked)、等待（time waiting、waiting）、消亡（dead）
    10.同步互斥锁：synchronized三种使用方式，修饰实例方法，对当前实例加锁；修饰静态方法，对当前Class对象加锁；修饰代码块，对指定对象加锁。通过javap可查看字节码，修饰方法通过
    字节码中的flag（ACC_SYNCHRONIZED）设置加锁，修饰块通过在代码块前后加monitorenter 和monitorexit 指令。
    synchronized加锁，每个对象都有一个monitor对象与之关联，monitor中有两个队列，一个同步队列一个等待队列，当多个线程同时访问一段代码时，没有获取到锁的线程会进入到同步队列，
    当线程调用了wait方法时，会释放调锁，然后进入等待队列，
    JVM对synchronized的优化：偏向锁、轻量级锁、自旋锁、锁消除
    11.UnSafe（指针类）、CAS（比较交换）和AQS（队列同步器）：
        - UnSafe：allocateMemory、reallocateMemory、freeMemory用于分配内存、扩展内存、释放内存，UnSafe可以定位对象属性的内存位置
        - CAS：依托于UnSafe类，通过比较预期值域内存位置上的值，相等则设置为新值，否则不操作；Atomic系列就是基于CAS保证操作的原子性，
            循环读取值与内存位置上的值比较，直到相等然后设置新值
        - AQS：用于构建锁或其他同步组件的基础框架，通过一个volatile int state控制同步状态，当state=0时表示没有任何线程占用共享资源，
            当state>0表示当前有线程占用共享资源，其他线程需要进入同步队列进行等待。AQS中通过内部类Node构建一个双向队列实现FIFO的同步队列
            完成线程获取锁的排队工作，通过ConditionObject构建一个等待队列，当线程调用await之后线程会加入等待队列，当其他线程调用signal之后
            线程将从等待队列移到同步队列进行锁竞争。
            AQS作为基础组件，对于锁的实现有两种不同的模式，共享模式（Semaphore）和独占模式（ReentrantLock），不管是共享模式还是独占模式都是基于
            AQS实现的，内部都维持着一个同步队列和多个等待队列。
    12.JUC并发包：ReentrantLock、Condition、Semaphore、CountDownLatch 、CyclicBarrier
       - ReentrantLock：基于AQS实现的独占重入锁，同一个线程可以多次获取同一把锁，释放相同的次数，灵活，多种获取锁方式。
       - Condition：可以让线程在合适的时间地点进行等待，或者在特定的时刻通知线程继续执行
       - Semaphore：信号量用于控制访问公共资源的线程数量，用于流量控制；多个线程间还是存在并发问题
       - CountDownLatch：闭锁，一种同步的方法，延迟线程进度直到线程到达某个终点状态，只能使用一次，基于AQS实现
       - CyclicBarrier：循环栅栏，一个同步辅助类，允许一组线程相互等待，直到达到某个公共屏障点，内部通过一个ReentrantLock和Condition进行计算等待
    13.线程池
        - 线程过多对性能的影响：会耗尽CPU和内存资源，创建和关闭线程需要花费过多时间，大量线程回收给GC带来压力，延长GC停顿时间
        - 创建线程池：JDK实现的线程池ThreadPoolExecutor，corePoolSize指定线程池中的线程数量，maxPoolSize指定线程池中最大的线程数量，
            keepAliveTime指定多余线程存活时长，timeUnit制动keepAliveTime单位，workQueue任务队列，threadFactory线程工厂，handle拒绝策略
        - 任务队列的几种实现：SynchronousQueue（没有容量，总是将任务交给线程执行，没有线程则新建，大于最大线程数，则执行拒绝）、
            ArrayBlockingQueue（有界队列，任务大于corePoolSize则将任务加入任务队列，若队列已满，则创建线程，若线程数量大于maxPoolSize则执行拒绝）、
            LinkedBlockingQueue（无界队列，任务大于corePoolSize加入任务队列，直到资源耗尽）、PriorityBlockingQueue（优先队列）
        - 拒绝策略：AbortPolicy（直接抛异常）、CallerRunsPolicy（调用线程运行被丢弃任务）、DiscardOledestPolicy（丢弃最老任务）、DiscardPolicy（丢弃无法处理的任务）
        - 使用线程池的优势：
            提高资源利用率：线程池可以重复利用已经创建好的线程，减少线程创建和销毁的巨大开销
            提高响应速度：线程池中有待分配的线程时，当任务到来时，无需创建线程就能执行
            具有可管理行：线程池会根据当前系统的特点对线程池内的线程进行优化处理，减少创建和销毁线程带来的系统开销
        - 线程池执行原理：创建线程池时不会一开始就创建线程，添加任务的时候才开始创建线程。线程池执行任务时，先获取线程池中的线程数量，当线程数量小于coreSize时，
            会将任务通过addWorker直接调度任务（Worker包装了线程创建和调度执行的过程），否则通过workQueue.offer()进入等待队列，如果进入等待队列失败，则把任务交给
            线程池，如果线程池中的线程数量已经到达了最大值，则执行解决策略。当worker执行完当前任务会从任务队列中取出任务继续执行，从阻塞队列中取任务，取任务有三种情况发生：
            1.取到任务并返回任务；2.没有取到任务，返回null,这个工作线程被回收；3.没有取到任务，阻塞在向阻塞队列取任务这里，第三点就是线程池中的空闲任务是如何存在的
        - 任务一般可分为：CPU密集型、IO密集型、混合型，对于不同类型的任务需要分配不同大小的线程池。
            1）CPU密集型任务 尽量使用较小的线程池，一般为CPU核心数+1
            2）IO密集型任务 可以使用稍大的线程池，一般为2*CPU核心数
            3）混合型任务 可以将任务分成IO密集型和CPU密集型任务，然后分别用不同的线程池去处理

14.ThreadLocal：为每个线程创建一个单独的变量副本，提供了保持对象的方法和避免参数传递的复杂性；每个Thread中维护这一个ThreadLocalMap，
    key是一个ThreadLocal的弱引用，当key的弱引用被GC回收，value却不能回收，则会出现内存泄漏
15.1、编译：Java编译分为前端编译和后端编译，前端编译是把.java文件转变成.class文件的过程，后端编译是把字节码转变成机器码的过程。
    javac结构主要分为词法分析器，语法分析器，语义分析器，代码生成器
    - 词法分析器：主要是逐行读取源代码，然后将源代码匹配到Token流，即使识别每一个单词是什么东西，如package匹配到Token.PACKAGE，class匹配到Token.CLASS，类名或者变量名匹配成Token.IDENTIFIER
    - 语法分析器：主要将Token流转换成更加结构化的语法树，就好像是给上面的单词组装成一个完整的句子
    - 语义分析器：将上面的语法树再精简和处理，如添加默认构造函数，检查变量初始化，类型是否匹配，检查exception是否抛出，解除java语法糖等等
    - 代码生成器：将语法树生成java字节码
15.2、类加载过程：加载、验证、准备、解析、初始化、使用、卸载
    - 加载：通过类的全限定名找类的二进制字节流，将字节流所代表的静态存储结构转化为方法区的运行时数据结构，生成一个代表这个类的Class对象
    - 验证：验证字节流是否和Class文件格式，解析语义
    - 准备：在方法区中为类变量分配内存并设置内存初始值
    - 解析：JVM将常量池内的符号引用替换为直接引用
    - 初始化：执行类构造器`<clinit>（）`方法`，<clinit>`方法是由编译器自动收集所有类变量赋值动作和静态语句块合并产生的，顺序有源文件中的顺序决定
16.Java中赋值顺序
    1）父类静态变量赋值和执行静态代码块
    2）自身静态变量赋值和执行静态代码块
    3）父类成员变量赋值和执行父类代码块
    4）父类构造方法赋值
    5）自身成员变量赋值和执行自身代码块
    6）自身构造方法赋值
17.JDK中的类加载器
    - 启动类加载器（Bootstrap CLassLoader），加载Java的核心类库，`${JAVA_HOME}\lib`下的jvm指定类库，它有C++实现，无法被Java应用程序直接使用
    - 扩展类加载器（Extension ClassLoader），父加载器是启动类加载器，它是一个ClassLoader实例，负责加载`${JAVA_HOME}/lig/ext`目录下的类库
    - 应用类加载器（Application ClassLoader），也叫作系统类加载器（System ClassLoader),负责加载用户类路指定的类库，getSystemClassLoader方法返回
    sun.misc.Launcher$AppClassLoader实例，它由启动类加载器加载
    - 自定义类加载器，应用程序根据自己的需求开发的类加载器，可以继承ClassLoader也可不继承
18.双亲委派模型的工作过程
    如果一个类加载器收到加载的请求，它首先不会自己去尝试加载，而是把这个请求委派给父加载器去完成，每个层次的加载器都是如此，因此所有的加载请求都会传到
    顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。
    在JVM中使用完全类名+ClassLoader对象实例ID作为一个类的唯一标识，不同的加载器加载了同一个类名实例是不同的，也不能进行强制转换，每个线程中都有一个ClassLoader，
    并且会从父线程中继承，在没有显示的指定哪个类加载器时，默认使用当前线程的类加载器
 19.JVM参数
    堆：-Xms -Xmx -Xmn(分给新生代) -XX:SurvivorRatio=8(新生代Eden和Survivor比例)
    栈：-Xss -Xoss（本地栈）
    方法区：-XX：PermSize=   -XX:MaxPermSize=
    老年代阀值：-XX:MaxTenuringThreshold=
20.JVM 工具
    jps：输出JVM中运行的进程状态
    jstack：查看Java进程中线程的栈信息
    jmap：查看进程中堆内存使用情况
    jstat：是用于监视虚拟机各种运行状态信息的命令行工具
21.CPU 100%定位
    1）top -c （显示进程列表），输入P，进程按照CPU使用率排序
    2）top -Hp PID（显示PID中线程列表），输入P，线程按照CPU使用率排序
    3）将PID转成十六进制
    4）jstack 10765 | grep ‘0x2a34’ -C5 –color （查看线程栈）

六、Java 中常见容器
    1.有序集合List
        - ArrayList：新建是创建一个空的Object数组，第一次add时扩展容量为10，空间不足是扩展为原来的1.5倍，通过Arrays.copyOf进行拷贝
        - LinkedList：由内部类Node构建的一个FIFO双向链表
        - Vector：线程安全的list，通过方法加synchronized
        - CopyOnWriteArrayList：写入时先加锁读到数组，然后扩展加入新元素，最后赋值解锁；读支持并发读
    2.无序无重复集合Set
        - HashSet：由HashMap的key构成
        - LinkedHashSet：底层由LinkedHashMap实现，由hashCode决定元素的存储位置，同时使用链表维护元素的次序，插入性能低于HashSet，遍历时要快
        - TreeSet：TreeSet可以确保集合元素处于排序状态

3.Map容器
    - HashMap：基于哈希表的数据结构，初始容量16，默认负载因子0.75
    - HashTable：线程安全的哈希表
    - LinkedHashMap：继承HashMap，底层使用哈希表和双向链表保存元素
    - ConcurrentHashMap：高并发容器，在JDK1.7版本中，ConcurrentHashMap的数据结构是由一个Segment数组和多个HashEntry组成，Segment继承了ReentrantLock，
    Segment数组的意义就是将一个大的table分割成多个小的table来进行加锁，也就是上面的提到的锁分离技术，而每一个Segment元素存储的是HashEntry数组+链表，
    这个和HashMap的数据存储结构一样。
    JDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap


七、Dubbo
    1.dubbo中用到的设计模式：工厂模式、装饰器模式、责任链模式、观察者模式、动态代理模式
    2.dubbo中的注解：SPI（标识一个扩展点，接口上）、Adaptive（作用在方法上，根据方法参数来调用具体实现类的对应方法）、
        Activate（作用于类上，标识Filter是否加入执行器责任链中）
    3.dubbo中的插件机制：每个组件接口都有一个ExtensionLoader负责加载、存储该组件的扩展点，有三种加载方式：名称加载扩展点、加载激活扩展点（filter）、加载自适应扩展点
    4.服务提供者初始化，dubbo服务提供者在ServiceConfig的export方法中开始暴露服务，选用服务端口默认20880；
    - 生成URL对象，URL是dubbo中的核心模型，包含了调用链路中的注册中心、服务端配置、消费端配置，有两种URL（注册中心URL、服务URL）；
    - 生成本地服务代理，scope没有设置成remote，服务同时会在本地暴露，生成一个本地服务代理对象，本地调用dubbo接口时直接调用本地代理不走网络请求
    - 生成远程服务代理，它会生成一个Invoker，该Invoker是服务ref（实现类）的一个代理包含了携带服务信息的URL对象，Invoker的invoke方法被调用时最终调到ref指定的服务实现，Invoker创建之后
    接着由Protocol组件来创建Exporter，这里有RegistryProtocol创建会包装进Listener和Filter，在RegistryProtocol.doLocalExport执行暴露逻辑，真正执行服务暴露的是DubboProtocol，这里启动服务监听，
    再回到RegistryProtocol中完成把服务注册到注册中心，提供者会监听configurators节点，感知注册中心的配置变化
    5.服务消费者初始化，ReferenceBean是一个FactoryBean，在init方法中开始初始化消费者，RegistryProtocol.refer方法中先把消费者注册到注册中心，然后监听providers、configurators、routers节点，消费端
    会本地缓存远程服务提供者、注册中心配置、路由配置信息，消除消费端对注册中心的强依赖，DubboProtocol.refer中创建一个DubboInvoker对象，该Invoker对象持有服务Class、providerUrl、
    负责和提供端通信的ExchangeClient，Invoker对象保存在DubboProtocol的invokers集合中，构建DubboInvoker时会创建一个或多个ExchangeClient用来处理和提供端的连接，默认一个URL只会创建一个ExchangeClient，由
    connections参数控制，RegistryProtocol.doRefer方法的最后，由Cluster组件来创建一个Invoker并返回一个扩展链，默认failover，最后生成消费端服务代理
    6.远程服务调用过程，消费者调用接口方法最终进入InvokerInvocationHandler的invoke方法，是否执行mock，加入负载均衡和路由、容错策略，然后由DubboInvoker执行，判断执行方法单向、异步、同步（通过锁进行等待，
    当超时或有结果返回时通知，通过唯一ID实现请求与返回对应），消费者请求编码->提供者请求解码->提供者处理请求->提供者响应结果编码->消费者响应结果解码
    7.请求编码：16个字节的固定消息头，其中包括2字节魔数，第三字节指定请求还是响应和序列化方式，八个字节的请求ID，4字节请求数据长度；
    响应编码：16字节数据头，2字节魔数，1字节序列化方式，1字节响应状态，8字节响应ID和请求ID一致，4字节消息长度
    8.集群容错模式:Failover 、Failfast 、Failsafe、 Failback、Forking
    9.dubbo负载均衡策略：随机、轮循、最少活跃调用数、一致性Hash

八、Spring
    1.Spring IOC和AOP概念
    2.注入方式：接口注入、set注入、构造方法注入
    3.Spring bean作用域：singleton、prototype、request、session、global session
    4.Spring框架中常见的设计模式：工厂方法、单例模式、适配器模式、装饰器模式、代理模式、观察者模式、策略模式、模板方法
    5.Spring bean的生命周期：
        - Spring 对bean 进行实例化，默认单例
        - Spring 对bean 进行依赖注入
        - 如果Bean实现了BeanNameAware接口，Spring将Bean的ID传给setBeanName（）方法
        - 如果Bean实现了BeanFactoryAware接口，Spring将BeanFactory传给setBeanFactory方法
        - 如果Bean实现了ApplicationContextAware接口，Spring将applicationContext传给setApplicationContext方法
        - 如果Bean实现了BeanPostProcessor接口，它的postProcessBeforeInitialization方法将被调用
        - 如果Bean实现了InitializingBean接口，它的afterPropertiesSet方法将被调用，如果有init-method，该方法也会被调用
        - 如果Bean实现了BeanPostProcessor接口，它的postProcessAfterInitialization方法将被调用
        - 此时Bean已经准备就绪，可以被使用，一直存在应用上下文中，直到应用上下文被销毁
        - 若Bean实现DisposableBean接口，Spring将调用它的distroy方法，和distroy-method方法
    6.Spring容器可分为两条主要设计路线，BeanFactory是IOC容器的基础，提供了IOC容器最基本的功能，ApplicationContext继承了BeanFactory，
    另一方面实现了一些高级接口，赋予了更高级的IOC容器特性。
    Spring IOC容器的主要功能是创建和管理Spring Bean对象以及Bean属性注入，Spring容器通过ResourceLoader/Resolver读取Bean的配置文件并
    转换成统一资源对象Resource，然后通过BeanDefinitionReader转化成Spring内部对Bean的描述对象BeanDefinition，然后通过BeanRegistry注册
    到BeanFactory中，供后续转换成Bean对象使用
    7.常见的ApplicationContext实现
        - FileSystemXMLApplicationContext：从文件绝对路径加载配置文件
        - ClassPathXMLApplicationContext：从classpath加载配置文件
        - XMLWebApplicationContext：web中使用
        - AnnotationConfigApplicationContext：Spring Boot非Web项目使用
        - AnnotationConfigEmbeddedWebApplicationContext：Spring Boot Web项目中使用
    8.Spring IOC容器启动过程（Spring Boot为例）
        - Spring Boot默认一些类在META-INF/spring.factories中，通过SpringFactoriesLoader加载，在initialize方法中会加载ApplicationContextInitializer、
        ApplicationListener供后续启动过程中使用
        - SpringApplication的run方法中会触发一些容器启动事件，先是ApplicationStartedEvent，然后ApplicationEnvironmentPreparedEvent，比如ConfigFileApplicationListener
        就是这时候触发的，加载application.properties配置，然后创建ApplicationContext（AnnotationConfigEmbeddedWebApplicationContext）上下文，
        这里实例化AnnotatedBeanDefinitionReader、ClassPathBeanDefinitionScanner扫描注解定义的Bean的工具，接着触发ApplicationPreparedEvent，
        这阶段导入EnableAutoConfiguration自动配置类，接着调用Spring IOC启动核心AbstractApplicationContext中refresh方法
        refresh方法中：
        1）传统的Spring在这里创建BeanFactory并读取bean的定义文件，加载、解析、注册BeanDefinition，Spring Boot不在这里创建
        2）为BeanFactory配置容器特性，例如类加载器、事件处理器等
        3）容器的某些子类指定特殊的BeanPost事件处理器，Spring Boot中这里实现注解定义的Bean的扫描工作
        4）调用所有注册的BeanFactoryPostProcessor的Bean
        5）注册所有实现了BeanPostProcessor接口的Bean
        6）onRefresh调用容器子类某些特殊Bean的初始化，模板方法，Spring Boot中这里创建内嵌Tomcat
        7）实例化单例Bean
    9.Spring MVC 初始化
        - DispatcherServletAutoConfiguration中实例化DispatcherServlet，从父类HttpServletBean的init方法开始
        - spring是一个大的父容器，springmvc是其中的一个子容器。父容器不能访问子容器对象，但是子容器可以访问父容器对象。一般做一个ssm框架项目的时候，
        扫描@controller注解类的对象是在springmvc容器中。而扫描@service、@component、@Repository等注解类的对象都是在spring容器中。
        在FrameworkServlet的initWebApplicationContext方法中初始化子容器，在DispatchServlet的onRefresh中初始化MVC九大组件
        initMultipartResolver(context);//初始化文件上传解析器
        initLocaleResolver(context);//初始化本地解析器
        initThemeResolver(context);//初始化主题解析器
        initHandlerMappings(context);//初始化处理器映射器
        initHandlerAdapters(context);//初始化处理器适配器
        initHandlerExceptionResolvers(context);//初始化异常解析器
        initRequestToViewNameTranslator(context);//初始化请求到视图名称解析器
        initViewResolvers(context);//初始化视图解析器
        initFlashMapManager(context);
        - 处理请求过程doDispatch
        1）处理文件上传请求
        2）解析请求，获取HandlerExecutionChain对象
        3）从HandlerExecutionChain对象获取HandlerAdapter对象，实际上是从HandlerMapping对象中获取
        4）在controller方法执行前，执行拦截器的相关方法（pre）
        5）执行HandlerAdapter对象的handler方法，返回ModelAndView
        6）在controller方法执行后，执行拦截器的相关方法（post）
        7）进行视图解析

八、MySql
    1.事务ACID特性：原子性、一致性、隔离性、持久性
    2.分布式系统CAP理论：CAP指的是Consistency(强一致性)、Availability(可用性)、Partition tolerance(分区容错性)。
    3.BASE就是为了解决关系型数据库强一致性引起的可用性降低而提出的解决方案，基本可用、软状态、最终一致
    4.事务隔离级别：读未提交、读已提交（解决脏读）、可重复读（解决不可重复读，MySQL InnoDB通过MVCC解决幻读）、可串行化
    5.Spring事务
        - 传播行为：PROPAGATION_REQUIRED、PROPAGATION_SUPPORTS、PROPAGATION_MANDATORY、PROPAGATION_REQUIRED_NEW、PROPAGATION_NOT_SUPPORTED
        、PROPAGATION_NEVER、PROPAGATION_NESTED
        - 隔离规则：
        - 回滚规则：
    5.MySQL锁
        - 共享锁、排它锁、意向共享锁、意向排它锁
        - 行锁：纪录锁（锁住索引记录的一行）、间隙锁（锁住一个索引区间，开区间）、next-key锁（record lock + gap lock, 左开右闭区间）
        - 页锁：
        - 表锁：
    6.MySQL索引：索引是一种方便快速查找的数据结构。
        - 磁盘预读：系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位，InnoDB存储引擎中默认每个页的大小为16KB
        - B-Tree：多路平衡查找树，B-Tree中的每个节点有升序排序的关键字和数据和指向子树根节点的指针，指针指向子节点所在磁盘地址
        - B+Tree: 非叶子节点上只存储key值信息，所有记录按照键值大小顺序放在叶子节点，这样每个节点加大了key值数量，降低B+Tree高度
        - MyISAM: 索引文件和数据文件分开的，MyISAM引擎使用B+Tree作为索引结构，叶节点的data域存放的是数据记录的地址,
            在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。
        - InnoDB: 数据文件本身就是索引文件，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。
            这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。这种索引叫做聚集索引。InnoDB的所有辅助索引都引用主键作为data域，
            辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。
    7.MySQL高可用方案
      - 主从复制（异步复制）过程
          1）主数据库会将变更信息写入二进制日志文件（binlog）中
          2）从数据库会开启一个IO线程，与主数据库建立一个连接，主数据库启动一个二进制日志转储线程，从数据库从这个转储线程中读取主数据库上的变更事件，
              并将变更事件记录到中继日志中
          3）从数据库启动一个SQL线程从中继日志中读取变更事件，并将变更事件同步到从数据库中。
      - 主从复制延迟的原因
          1）主库的从库太多，导致复制延迟，从库3-5个为宜
          2）从库的硬件比主库差，导致复制延迟
          3）慢SQL过多
          4）主从复制设计问题，主从复制单线程，如果主库写并发太大，来不及传送到从库，就会导致延迟。设计多线程复制。
          5）主从之间的网络延迟
      - binlog日志复制的三种实现方式
          1）基于SQL语句的复制(statement-based replication, SBR)，binlog文件较小，不是所有的UPDATE语句都能被复制
          2）基于行的复制(row-based replication, RBR)，任何情况都可以被复制，binlog 大了很多
          3）混合模式复制(mixed-based replication, MBR)。
      - MySQL通过复制（Replication）实现存储系统的高可用。目前，MySQL支持的复制方式有：
          1）异步复制（Asynchronous Replication）：原理最简单，性能最好。但是主备之间数据不一致的概率很大。
          2）半同步复制（Semi-synchronous Replication）：相比异步复制，半同步复制牺牲了一定的性能，提升了主备之间数据的一致性（有一些情况还是会出现主备数据不一致）。
              MySQL两种略有不同的半同步复制，AFTER_SYNC（日志复制到Slave之后，Master再commit）、AFTER_COMMIT（Master commit之后再将日志复制到Slave）。
          3）组复制（Group Replication）：基于Paxos算法实现分布式数据复制的强一致性。只要大多数机器存活就能保证系统可用。相比半同步复制，
              Group Replication的数据一致性和系统可用性更高。
      - MHA（Master High Availability）目前在MySQL高可用方面是一个相对成熟的解决方案，在MySQL故障切换过程中，MHA能做到在0~30秒之内自动完成数据库的故障切换操作，
          并且在进行故障切换的过程中，MHA能在较大程度上保证数据的一致性，以达到真正意义上的高可用。MHA可以与半同步复制结合起来。
          如果只有一个slave已经收到了的二进制日志，MHA可以将的二进制日志应用于其他所有的slave服务器上，因此可以保证所有节点的数据一致性。
          1）流程：当master出现故障时，通过对比slave之间I/O线程读取masterbinlog的位置，选取最接近的slave做为latestslave。
          其它slave通过与latest slave对比生成差异中继日志。在latest slave上应用从master保存的binlog，同时将latest slave提升为master。
          最后在其它slave上应用相应的差异中继日志并开始从新的master开始复制。
          2）优势：1）故障切换迅速 2）master故障不会导致数据不一致 3）无需修改当前的MySQL设置 4）无需增加大量的服务器 5）五性能下降
    8、MySQL日志
          1）sync_binlog：这个参数是对于MySQL系统来说是至关重要的，他不仅影响到Binlog对MySQL所带来的性能损耗，而且还影响到MySQL中数据的完整性。对于“ sync_binlog”参数的各种设置的说明如下：
            - sync_binlog=0，当事务提交之后， MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘。
            - sync_binlog=n，当每进行n次事务提交之后， MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘。
          2）Innodb事务日志刷新方式的参数： innodb_flush_log_at_trx_commit
            - innodb_flush_log_at_trx_commit = 0， Innodb中的Log Thread没隔1秒钟会将log buffer中的数据写入到文件，同时还会通知文件系统进行文件同步的flush操作，
            保证数据确实已经写入到磁盘上面的物理文件。但是，每次事务的结束（ commit或者是rollback）并不会触发Log Thread将 log buffer中的数据写入文件。所以，
            当设置为0的时候，当 MySQL Crash 和OS Crash 或者主机断电之后，最极端的情况是丢失1秒时间的数据变更。
            - innodb_flush_log_at_trx_commit = 1，这也是Innodb的默认设置。我们每次事务的结束都会触发Log Thread将log buffer中的数据写入文件并通知文件系统同步文件。这个设置是最安全的设置，能够保证不论是MySQL Crash 还是 OS Crash 或者是主机断电都不会丢失任何已经提交的数据。
            - innodb_flush_log_at_trx_commit = 2，当我们设置为2的时候， Log Thread会在我们每次事务结束的时候将数据写入事务日志，
            但是这里的写入仅仅是调用了文件系统的文件写入操作。而我们的文件系统都是有缓存机制的，所以Log Thread的这个写入并不能保证内容真的已经写入到物理
            磁盘上面完成持久化的动作。文件系统什么时候会将缓存中的这个数据同步到物理磁盘文件Log Thread就完全不知道了。所以，当设置为2的时候，
            MySQL Crash 并不会造成数据的丢失，但是OS Crash或者是主机断电后可能丢失的数据量就完全控制在文件系统上了。
          3）InnoDB undo日志和redo日志
            - 为了满足事务的原子性，在操作任何数据之前，首先将数据备份到Undo Log，然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，
            系统可以利用Undo Log中的备份将数据恢复到事务开始之前的状态。与redo log不同的是，磁盘上不存在单独的undo log文件，它存放在数据库内部的一个特殊段(segment)中，
            这称为undo段(undo segment)，undo段位于共享表空间内。
            - redo log就是保存执行的SQL语句到一个指定的Log文件，当mysql执行数据恢复时，重新执行redo log记录的SQL操作即可。引入buffer pool会导致更新的数据不会实时持久
            化到磁盘，当系统崩溃时，虽然buffer pool中的数据丢失，数据没有持久化，但是系统可以根据Redo Log的内容，将所有数据恢复到最新的状态。redo log在磁盘上作
            为一个独立的文件存在。默认情况下会有两个文件，名称分别为 ib_logfile0和ib_logfile1。

九、Redis
    - Redis有哪些数据结构？
        字符串String、字典Hash、列表List、集合Set、有序集合SortedSet。
    - 使用过Redis分布式锁么，它是什么回事？
        先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。
        可以通过管道Pipeline同时把setnx和expire合成一条指令来用。
    - 假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如果将它们全部找出来？
        使用keys指令可以扫出指定模式的key列表。
    - 对方接着追问：如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？
        这个时候你要回答redis关键的一个特性：redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。
        这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，
        但是整体所花费的时间会比直接用keys指令长。
    - 使用过Redis做异步队列么，你是怎么用的？
        一般使用list结构作为队列，rpush生产消息，lpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。
        如果对方追问可不可以不用sleep呢？list还有个指令叫blpop，在没有消息的时候，它会阻塞住直到消息到来。
        如果对方追问能不能生产一次消费多次呢？使用pub/sub主题订阅者模式，可以实现1:N的消息队列。
        如果对方追问pub/sub有什么缺点？在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。
    - 如果对方追问redis如何实现延时队列？
        使用sortedset，拿时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。
    - 如果有大量的key需要设置同一时间过期，一般需要注意什么？
        如果大量的key过期时间设置的过于集中，到过期的那个时间点，redis可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。
    - Redis如何做持久化的？
        bgsave做镜像全量持久化，aof做增量持久化。因为bgsave会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要aof来配合使用。在redis实例重启时，
        会使用bgsave持久化文件重新构建内存，再使用aof重放近期的操作指令来实现完整恢复重启之前的状态。
    - 对方追问那如果突然机器掉电会怎样？
        取决于aof日志sync属性的配置，如果不要求性能，在每条写指令时都sync一下磁盘，就不会丢失数据。但是在高性能的要求下每次都sync是不现实的，一般都使用定时sync，
        比如1s1次，这个时候最多就会丢失1s的数据。
    - 对方追问bgsave的原理是什么？
        你给出两个词汇就可以了，fork和cow。fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，
        父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。
    - Pipeline有什么好处，为什么要用pipeline？
        可以将多次IO往返的时间缩减为一次，前提是pipeline执行的指令之间没有因果相关性。使用redis-benchmark进行压测的时候可以发现影响redis的QPS峰值的一个重要因素
        是pipeline批次指令的数目。
    - redis的同步机制了解么？
        Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将rdb文件全量同步到复制节点，
        复制节点接受完成后将rdb镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。
    - 是否使用过Redis集群，集群的原理是什么？
        Redis Sentinal着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。
        Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。
    - redis一致性hash算法：
         将用户和redis节点的hash值对应到一个32位的环形数据结构上，环形结构首尾封闭，用户通过hash算法来定位在环形结构上，redis节点也通过hash算法来定位到环形结构上，
         此时的命中问题就变成了，用户节点通过顺时针旋转，在旋转的过程中若碰到redis节点，就在该节点上读取数据，若此时在环形结构上增加新的redis节点，由于是顺时针寻找对应的redis节点，
         所以用户此时的redis命中率还是很高的，不会因为增加了一台redis节点就导致大量的用户命中失败的情况出现。
    - hash倾斜：
          上述情况是发生在redis节点均匀分布在环形结构上的情况下，但是若redis节点分布密集，并且集中在环形结构上一侧，那么就会出现，大量的用户节点请求同一台redis服务器，
          而其余redis服务器处于低请求的情况，若此时再加入一个redis节点，那么同样会导致命中率失败变高。这种情况叫做hash倾斜。
    - hash倾斜的解决办法：
        增加虚拟节点，假如有1 ，2两台redis节点分布在32位环形结构上，那么我们可以增加大量的虚拟的 1， 2节点在环形结构上。用户命中到虚拟节点之后，在hash到真实的redis机器上。
        虽然增加虚拟节点可以解决此问题，但是依然存在hash倾斜的问题，但是随着虚拟节点的大量增加，就会使得出现hash命中失败的现象降到最低。
        一致性hash算法公式：1-n/(n + m) * 100%   n表示真实的redis节点，m表示增加的虚拟节点，可以看到随着虚拟节点的增加，命中失败越来越低。


十、zookeeper
    - Zookeeper是一个高效的分布式协调服务，Zookeeper集群中节点个数一般为奇数个（>=3），若集群中Master挂掉，剩余节点个数在半数以上时，就可以推举新的主节点，
    继续对外提供服务。客户端发起事务请求，事务请求的结果在整个Zookeeper集群中所有机器上的应用情况是一致的。在Zookeeper集群中的任何一台机器，
    其看到的服务器的数据模型是一致的。
    - Zookeeper使用的数据结构为树形结构，根节点为"/"。Zookeeper集群中的节点，根据其身份特性分为leader、follower、observer。leader负责客户端writer类型的请求；
    follower负责客户端reader类型的请求，并参与leader选举；observer是特殊的follower，可以接收客户端reader请求，但是不会参与选举，可以用来扩容系统支撑能力，
    提高读取速度。
    - Zookeeper是一个基于观察者模式设计的分布式服务管理框架，负责存储和管理相关数据，接收观察者的注册。一旦这些数据的状态发生变化，
    zookeeper就负责通知那些已经在zookeeper集群进行注册并关心这些状态发生变化的观察者，以便观察者执行相关操作。
    - Zookeeper使用的是ZAB原子消息广播协议，节点之间的一致性算法为Paxos，能够保障分布式环境中数据的一致性。分布式场景下高可用是Zookeeper的特性，
    可以采用第三方客户端的实现，即Curator框架。
    - Paxos 算法解决的问题是一个分布式系统如何就某个值（决议）达成一致。Paxos 算法就是一种基于消息传递模型的一致性算法。
    - 四种类型的znode：
        1)PERSISTENT-持久化目录节点
        2)PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点
        3)EPHEMERAL-临时目录节点
        4)EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点
    - 通知机制：客户端注册监听它关心的目录节点，当目录节点发生变化（数据改变、被删除、子目录节点增加删除）时，zookeeper会通知客户端。
    - zookeeper master选举：当leader崩溃或者leader失去大多数的follower，这时候zk进入恢复模式，恢复模式需要重新选举出一个新的leader，
    让所有的 Server都恢复到一个正确的状态。
        1)选举线程由当前Server发起选举的线程担任，其主要功能是对投票结果进行统计，并选出推荐的Server；
        2)选举线程首先向所有Server发起一次询问(包括自己)；
        3)选举线程收到回复后，验证是否是自己发起的询问(验证zxid是否一致)，然后获取对方的id(myid)，并存储到当前询问对象列表中，
        最后获取对方提议的leader相关信息(id,zxid)，并将这些信息存储到当次选举的投票记录表中；
        4)收到所有Server回复以后，就计算出zxid最大的那个Server，并将这个Server相关信息设置成下一次要投票的Server；
        5) 线程将当前zxid最大的Server设置为当前Server要推荐的Leader，如果此时获胜的Server获得n/2 + 1的Server票数，
        设置当前推荐的leader为获胜的Server，将根据获胜的Server相关信息设置自己的状态，否则，继续这个过程，直到leader被选举出来。
    - zookeeper如何感应节点挂了
        Zookeeper客户端和服务端维持一个长连接，每隔10s向服务端发送一个心跳，服务端返回客户端一个响应。
        - 客户端在节点 x 上注册一个Watcher，那么如果 x 的子节点变化了，会通知该客户端。
        - 创建EPHEMERAL类型的节点，一旦客户端和服务器的会话结束或过期，那么该节点就会消失。

十一、设计模式
    1.设计模式七大原则
        1）开闭原则 2）里氏替换原则 3）依赖倒转原则 4）接口隔离原则 5）组合/聚合复用原则 6）迪米特法则 7）单一职责原则
    2.常见设计模式
        1）单列模式
        2）装饰器模式
        3）适配器模式
        4）模板方法模式
        5）代理模式
        6）责任链模式
        7）观察者模式

十二、Java性能优化
    1.设计优化
        1）善于使用设计模式
        2）Java缓冲区
        3）缓存
        4）对象复用---池的使用
        5）并行代替串行
        6）时间换空间：不引入中间变量实现两个数字的交换。代价是增加 CPU 运算。
        7）空间换时间：使用下标数组排序。
    2.程序优化
    3.JVM 优化

十三、遇到问题

